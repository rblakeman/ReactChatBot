{"version":3,"sources":["action.js","logo.svg","components/message-list.js","components/chat-input.js","App.js","reducers/reducer-message.js","reducers/reducer-json.js","reducer.js","reducers/reducer-id.js","index.js"],"names":["SET_JSON","SEND_MESSAGE","UPDATE_ID","setJSON","data","type","payload","sendMessage","message","updateID","id","styles","chatWindowCenter","backgroundColor","display","flexDirection","flex","overflowY","padding","loadingSpinner","alignSelf","paddingTop","receipientName","color","authorName","chatMessage","chatText","MessageList","chatScrollContainer","document","getElementById","scrollTop","scrollHeight","messages","this","props","style","length","size","_","map","ele","idx","author","user","split","Component","connect","state","onboardingJSON","json","currentID","chatWindowBottom","height","inputBox","marginRight","borderRadius","marginBottom","width","sendButton","marginLeft","ChatInput","input","newMessage","setState","disabled","validation","TextField","variant","onChange","ev","target","value","placeholder","onKeyDown","key","preventDefault","sendInput","Button","onClick","dispatch","bindActionCreators","root","backgroundImage","justifyContent","alignItems","supportWindow","boxShadow","supportIcon","supportText","textTransform","fontSize","supportFakeButton","chatWindow","chatWindowTop","paddingLeft","receipientPic","BOT_NAME","App","getOnboardingQuestions","checkResponse","a","fetch","then","res","ok","question","originalMessage","toLower","trim","postMessage","paths","RegExp","test","newPath","includes","Object","keys","PUT_URL","method","headers","body","JSON","stringify","src","logo","alt","initialState","rootReducer","combineReducers","action","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","store","reducers"],"mappings":"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","file":"static/js/main.92f0c31a.chunk.js","sourcesContent":["export const SET_JSON = 'SET_JSON';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const UPDATE_ID = 'UPDATE_ID';\n\nexport function setJSON(data) {\n  return {\n    type: SET_JSON,\n    payload: data\n  };\n}\n\nexport function sendMessage(message) {\n  let data = message;\n\n  return {\n    type: SEND_MESSAGE,\n    payload: data\n  };\n}\n\nexport function updateID(id) {\n  if (id < 0) id = 0;\n\nreturn {\n    type: UPDATE_ID,\n    payload: id\n  };\n}\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nconst styles = {\n  chatWindowCenter: {\n    backgroundColor: '#FFFFFF',\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    overflowY: 'scroll',\n    padding: '10px 20px'\n  },\n  loadingSpinner: {\n    alignSelf: 'center',\n    paddingTop: '100px'\n  },\n  receipientName: {\n    color: '#354058'\n  },\n  authorName: {\n    color: '#5294FC'\n  },\n  chatMessage: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '5px 0px'\n  },\n  chatText: {\n    color: '#B7BFC8' //'#CBD3DC'\n  }\n};\n\nclass MessageList extends Component {\n  componentDidUpdate() {\n    let chatScrollContainer = document.getElementById('chat-scroll');\n    chatScrollContainer.scrollTop = chatScrollContainer.scrollHeight;\n  }\n\n  render() {\n    const { messages } = this.props;\n\nreturn (\n      <div style={styles.chatWindowCenter} id='chat-scroll'>\n        {messages.length < 1 ? (\n          <div style={styles.loadingSpinner}>\n            <BeatLoader size={15} color='#C6EEF0' />\n          </div>\n        ) : (\n            _.map(messages, (ele, idx) => {\n            return (\n              <div key={idx} style={styles.chatMessage}>\n                <div\n                  style={\n                    ele.author === this.props.user\n                      ? styles.authorName\n                      : styles.receipientName\n                  }\n                >\n                  {ele.author}\n                </div>\n                <div style={styles.chatText}>\n                  {ele.style === 'password'\n                    ? _.map(ele.message.split(''), (ele) => {\n                        return '*';\n                      })\n                    : ele.message}\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onboardingJSON: state.json,\n    messages: state.messages,\n    currentID: state.id\n  };\n}\n\nexport default connect(mapStateToProps)(MessageList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { setJSON, sendMessage, updateID } from '../action';\n\nimport { Button, TextField } from '@material-ui/core';\nimport SendICON from '@material-ui/icons/SendOutlined';\n\nconst styles = {\n  chatWindowBottom: {\n    backgroundColor: '#EBF5F6', //'#CBD3DC',\n    height: '60px',\n    display: 'flex',\n    flexDirection: 'row',\n    padding: '20px'\n  },\n  inputBox: {\n    backgroundColor: '#FFFFFF',\n    marginRight: '10px',\n    borderRadius: '5%',\n    marginBottom: '0',\n    width: '100%',\n    height: '93%'\n  },\n  sendButton: {\n    color: '#FFFFFF',\n    backgroundColor: '#5294FC',\n    marginLeft: '10px',\n    height: '93%'\n  }\n};\n\nclass ChatInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { input: '' };\n  }\n\n  sendInput(message) {\n    const { onboardingJSON, currentID } = this.props;\n    let newMessage = {\n      message: message,\n      author: this.props.author\n    };\n    if (onboardingJSON[currentID].style === 'password')\n      newMessage.style = 'password';\n\n    this.props.sendMessage(newMessage);\n    this.setState({ input: '' });\n  }\n\n  render() {\n    const { onboardingJSON, currentID } = this.props;\n    const { input } = this.state;\n\n    const disabled = onboardingJSON.length && !onboardingJSON[currentID].validation;\n\n    return (\n      <div style={styles.chatWindowBottom}>\n        <TextField\n          disabled={disabled}\n          variant=\"outlined\"\n          onChange={(ev) => this.setState({ input: ev.target.value })}\n          placeholder=\"Type here...\"\n          style={styles.inputBox}\n          value={input}\n          type={\n            onboardingJSON.length > 0 &&\n            onboardingJSON[currentID].style === 'password'\n              ? 'password'\n              : null\n          }\n          onKeyDown={(ev) => {\n            if (ev.key === 'Enter' && input.length > 0) {\n              ev.preventDefault();\n              this.sendInput(input);\n            }\n          }}\n        />\n        <Button\n          disabled={disabled}\n          onClick={(ev) => {\n            ev.preventDefault();\n            if (input.length > 0) {\n              this.sendInput(input);\n            }\n          }}\n          style={styles.sendButton}\n        >\n          <SendICON />\n        </Button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onboardingJSON: state.json,\n    messages: state.messages,\n    currentID: state.id\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ setJSON, sendMessage, updateID }, dispatch);\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChatInput);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { setJSON, sendMessage, updateID } from './action';\nimport _ from 'lodash';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport MessageList from './components/message-list';\nimport ChatInput from './components/chat-input';\n\nimport { Button } from '@material-ui/core';\nimport ChatICON from '@material-ui/icons/ChatOutlined';\nimport DownArrowICON from '@material-ui/icons/KeyboardArrowDown';\n\nconst styles = {\n  root: {\n    backgroundColor: '#B1E8EC',\n    backgroundImage:\n      'linear-gradient( -7deg, #B1E8EC 0%, #B1E8EC 50%, #BEEEF0 50%, #BEEEF0 50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh'\n  },\n  supportWindow: {\n    backgroundColor: '#354058',\n    width: '225px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    boxShadow: '0px -2px 40px -10px rgba(0,0,0,0.3)',\n    borderRadius: '5px 5px 0px 0px'\n  },\n  supportIcon: {\n    color: '#5294FC'\n  },\n  supportText: {\n    color: '#CBD3DC',\n    textTransform: 'none',\n    fontSize: '16px'\n  },\n  supportFakeButton: {\n    color: '#5294FC'\n  },\n  chatWindow: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '450px',\n    height: '450px',\n    boxShadow: '0px 12px 40px -10px rgba(0,0,0,0.3)'\n  },\n  chatWindowTop: {\n    backgroundColor: '#EBF5F6', //'#CBD3DC',\n    height: '70px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingLeft: '10px'\n  },\n  receipientPic: {\n    // borderRadius: '100%',\n    width: '70px'\n  },\n  receipientName: {\n    color: '#354058'\n  }\n};\n\nconst BOT_NAME = 'React Bot';\nconst USER_NAME = 'You';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.getOnboardingQuestions();\n  }\n\n  componentDidUpdate() {\n    const { messages } = this.props;\n\n    let length = messages.length - 1;\n    if (length > 0) {\n      if (messages[length].author !== BOT_NAME)\n        this.checkResponse(messages[length].message);\n    }\n  }\n\n  async getOnboardingQuestions() {\n    const URL =\n      'https://gist.githubusercontent.com/pcperini/97fe41fc42ac1c610548cbfebb0a4b88/raw/cc07f09753ad8fefb308f5adae15bf82c7fffb72/cerebral_challenge.json';\n    fetch(URL)\n      .then((res) => {\n        // In case the gist is deleted or doesn't load\n        if (!res.ok) {\n            return [\n                {\n                    \"id\": -1,\n                    \"question\": \"Sorry, we can't help you at this time. Have a nice day!\",\n                    \"validation\": false\n                },\n                {\n                    \"id\": 1,\n                    \"question\": \"Sorry, we encountered an error. Please try again later!\",\n                    \"validation\": false,\n                    \"paths\": -1\n                }\n            ];\n        }\n\n        return res.json();\n      })\n      .then((data) => {\n        this.props.setJSON(data);\n        this.props.sendMessage({\n          message: data[1].question,\n          author: BOT_NAME\n        });\n      });\n  }\n\n  checkResponse(message) {\n    const { onboardingJSON, currentID } = this.props;\n    if (onboardingJSON[currentID].validation === false) return;\n\n    //remove leading/trailing whitespace and lowercase response\n    const originalMessage = message;\n    message = _.toLower(_.trim(message));\n    if (typeof onboardingJSON[currentID].validation === 'boolean') {\n      //no need to verify, succeeded\n      this.postMessage(originalMessage, currentID);\n\n      this.props.sendMessage({\n        message: onboardingJSON[onboardingJSON[currentID].paths].question,\n        author: BOT_NAME\n      });\n      this.props.updateID(onboardingJSON[currentID].paths);\n\nreturn;\n    } else if (typeof onboardingJSON[currentID].validation === 'string') {\n      //regex\n      let regexString = new RegExp(onboardingJSON[currentID].validation);\n      if (regexString.test(message)) {\n        //succeeded\n        this.postMessage(originalMessage, currentID);\n\n        let newPath = onboardingJSON[currentID].paths;\n        this.props.sendMessage({\n          message: onboardingJSON[newPath].question,\n          author: BOT_NAME\n        });\n        this.props.updateID(newPath);\n\nreturn;\n      } else {\n        //failed\n        this.props.sendMessage({\n          message: `Your response didn't meet the criteria, please try again`,\n          author: BOT_NAME\n        });\n        this.props.sendMessage({\n          message: onboardingJSON[currentID].question,\n          author: BOT_NAME\n        });\n\nreturn;\n      }\n    } else {\n      //mulitple options\n      if (_.includes(onboardingJSON[currentID].validation, message)) {\n        //succeeded\n        this.postMessage(originalMessage, currentID);\n\n        let newPath = -1;\n        if (Object.keys(onboardingJSON[currentID].paths).length > 1) {\n          newPath = onboardingJSON[currentID].paths[message];\n        } else {\n          newPath = onboardingJSON[currentID].paths;\n        }\n        if (newPath === -1) newPath = 0;\n        this.props.sendMessage({\n          message: onboardingJSON[newPath].question,\n          author: BOT_NAME\n        });\n        this.props.updateID(newPath);\n\nreturn;\n      } else {\n        //failed response\n        this.props.sendMessage({\n          message: `I don't understand your response, please try again`,\n          author: BOT_NAME\n        });\n        this.props.sendMessage({\n          message: onboardingJSON[currentID].question,\n          author: BOT_NAME\n        });\n\nreturn;\n      }\n    }\n  }\n\n  postMessage(originalMessage, id) {\n    const PUT_URL = `https://jsonplaceholder.typicode.com/posts/${id}`;\n    fetch(PUT_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(originalMessage)\n    }).then((res) => {\n      // console.log(res.json)\n    });\n  }\n\n  render() {\n    // const { onboardingJSON, messages, currentID } = this.props\n    return (\n      <div style={styles.root}>\n        <div style={{ display: 'flex' }}>\n          <div style={{ width: '225px', height: '50px' }} />\n          <Button style={styles.supportWindow}>\n            <div style={styles.supportIcon}>\n              <ChatICON />\n            </div>\n            <div style={styles.supportText}> Live Support </div>\n            <div style={styles.supportFakeButton}>\n              <DownArrowICON />\n            </div>\n          </Button>\n        </div>\n        <div style={styles.chatWindow}>\n          <div style={styles.chatWindowTop}>\n            <img src={logo} style={styles.receipientPic} alt=\"Bot Icon\" />\n            <div style={styles.receipientName}>{BOT_NAME}</div>\n          </div>\n          <MessageList user={USER_NAME} />\n          <ChatInput author={USER_NAME} />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onboardingJSON: state.json,\n    messages: state.messages,\n    currentID: state.id\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ setJSON, sendMessage, updateID }, dispatch);\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import { SEND_MESSAGE } from '../action';\n\nconst initialState = [];\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}\n","import { SET_JSON } from '../action';\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_JSON:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport MessageReducer from './reducers/reducer-message';\nimport JSONReducer from './reducers/reducer-json';\nimport IDReducer from './reducers/reducer-id';\n\nconst rootReducer = combineReducers({\n  json: JSONReducer,\n  messages: MessageReducer,\n  id: IDReducer\n});\n\nexport default rootReducer;\n","import { UPDATE_ID } from '../action';\n\nconst initialState = 1;\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\n\nimport './index.css';\nimport App from './App';\nimport reducers from './reducer';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
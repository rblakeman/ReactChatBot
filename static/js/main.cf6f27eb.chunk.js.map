{"version":3,"sources":["action.js","logo.svg","components/message-list.js","components/chat-input.js","App.js","reducers/reducer-message.js","reducers/reducer-json.js","reducer.js","reducers/reducer-id.js","index.js"],"names":["SET_JSON","SEND_MESSAGE","UPDATE_ID","setJSON","data","type","payload","sendMessage","message","updateID","id","styles","chatWindowCenter","backgroundColor","display","flexDirection","flex","overflowY","padding","loadingSpinner","alignSelf","paddingTop","receipientName","color","authorName","chatMessage","chatText","MessageList","chatScrollContainer","document","getElementById","scrollTop","scrollHeight","messages","this","props","style","length","size","_","map","ele","idx","author","user","split","Component","connect","state","onboardingJSON","json","currentID","chatWindowBottom","height","inputBox","marginRight","borderRadius","marginBottom","width","sendButton","marginLeft","ChatInput","input","newMessage","setState","disabled","validation","TextField","variant","onChange","ev","target","value","placeholder","onKeyDown","key","preventDefault","sendInput","Button","onClick","dispatch","bindActionCreators","root","backgroundImage","justifyContent","alignItems","supportWindow","boxShadow","supportIcon","supportText","textTransform","fontSize","supportFakeButton","chatWindow","chatWindowTop","paddingLeft","receipientPic","BOT_NAME","App","console","log","getOnboardingQuestions","checkResponse","a","fetch","then","res","ok","question","originalMessage","toLower","trim","postMessage","paths","RegExp","test","newPath","includes","Object","keys","PUT_URL","method","headers","body","JSON","stringify","src","logo","alt","initialState","rootReducer","combineReducers","action","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","store","reducers"],"mappings":"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","file":"static/js/main.cf6f27eb.chunk.js","sourcesContent":["export const SET_JSON = 'SET_JSON';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const UPDATE_ID = 'UPDATE_ID';\n\nexport function setJSON(data) {\n    return {\n        type: SET_JSON,\n        payload: data\n    };\n}\n\nexport function sendMessage(message) {\n    let data = message;\n\n    return {\n        type: SEND_MESSAGE,\n        payload: data\n    };\n}\n\nexport function updateID(id) {\n    if (id < 0) id = 0;\n\n    return {\n        type: UPDATE_ID,\n        payload: id\n    };\n}\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nconst styles = {\n    chatWindowCenter: {\n        backgroundColor: '#FFFFFF',\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        overflowY: 'scroll',\n        padding: '10px 20px'\n    },\n    loadingSpinner: {\n        alignSelf: 'center',\n        paddingTop: '100px'\n    },\n    receipientName: {\n        color: '#354058'\n    },\n    authorName: {\n        color: '#5294FC'\n    },\n    chatMessage: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '5px 0px'\n    },\n    chatText: {\n        color: '#B7BFC8' //'#CBD3DC'\n    }\n};\n\nclass MessageList extends Component {\n    componentDidUpdate() {\n        let chatScrollContainer = document.getElementById('chat-scroll');\n        chatScrollContainer.scrollTop = chatScrollContainer.scrollHeight;\n    }\n\n    render() {\n        const { messages } = this.props;\n\n        return (\n            <div style={styles.chatWindowCenter} id='chat-scroll'>\n                {messages.length < 1 ? (\n                    <div style={styles.loadingSpinner}>\n                        <BeatLoader size={15} color='#C6EEF0' />\n                    </div>\n                ) : (\n                    _.map(messages, (ele, idx) => {\n                        return (\n                            <div key={idx} style={styles.chatMessage}>\n                                <div\n                                    style={\n                                        ele.author === this.props.user\n                                            ? styles.authorName\n                                            : styles.receipientName\n                                    }\n                                >\n                                    {ele.author}\n                                </div>\n                                <div style={styles.chatText}>\n                                    {ele.style === 'password'\n                                        ? _.map(ele.message.split(''), (ele) => {\n                                            return '*';\n                                        })\n                                        : ele.message}\n                                </div>\n                            </div>\n                        );\n                    })\n                )}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        onboardingJSON: state.json,\n        messages: state.messages,\n        currentID: state.id\n    };\n}\n\nexport default connect(mapStateToProps)(MessageList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, TextField } from '@material-ui/core';\nimport SendICON from '@material-ui/icons/SendOutlined';\n\nimport { setJSON, sendMessage, updateID } from '../action';\n\nconst styles = {\n    chatWindowBottom: {\n        backgroundColor: '#EBF5F6', //'#CBD3DC',\n        height: '60px',\n        display: 'flex',\n        flexDirection: 'row',\n        padding: '20px'\n    },\n    inputBox: {\n        backgroundColor: '#FFFFFF',\n        marginRight: '10px',\n        borderRadius: '5%',\n        marginBottom: '0',\n        width: '100%',\n        height: '93%'\n    },\n    sendButton: {\n        color: '#FFFFFF',\n        backgroundColor: '#5294FC',\n        marginLeft: '10px',\n        height: '93%'\n    }\n};\n\nclass ChatInput extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { input: '' };\n    }\n\n    sendInput(message) {\n        const { onboardingJSON, currentID } = this.props;\n        let newMessage = {\n            message: message,\n            author: this.props.author\n        };\n        if (onboardingJSON[currentID].style === 'password')\n            newMessage.style = 'password';\n\n        this.props.sendMessage(newMessage);\n        this.setState({ input: '' });\n    }\n\n    render() {\n        const { onboardingJSON, currentID } = this.props;\n        const { input } = this.state;\n\n        const disabled = onboardingJSON.length && !onboardingJSON[currentID].validation;\n\n        return (\n            <div style={styles.chatWindowBottom}>\n                <TextField\n                    disabled={disabled}\n                    variant=\"outlined\"\n                    onChange={(ev) => this.setState({ input: ev.target.value })}\n                    placeholder=\"Type here...\"\n                    style={styles.inputBox}\n                    value={input}\n                    type={\n                        onboardingJSON.length > 0 && onboardingJSON[currentID].style === 'password'\n                            ? 'password'\n                            : null\n                    }\n                    onKeyDown={(ev) => {\n                        if (ev.key === 'Enter' && input.length > 0) {\n                            ev.preventDefault();\n                            this.sendInput(input);\n                        }\n                    }}\n                />\n                <Button\n                    disabled={disabled}\n                    onClick={(ev) => {\n                        ev.preventDefault();\n                        if (input.length > 0) {\n                            this.sendInput(input);\n                        }\n                    }}\n                    style={styles.sendButton}\n                >\n                    <SendICON />\n                </Button>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        onboardingJSON: state.json,\n        messages: state.messages,\n        currentID: state.id\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({ setJSON, sendMessage, updateID }, dispatch);\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChatInput);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport _ from 'lodash';\nimport { Button } from '@material-ui/core';\nimport ChatICON from '@material-ui/icons/ChatOutlined';\nimport DownArrowICON from '@material-ui/icons/KeyboardArrowDown';\n\nimport { setJSON, sendMessage, updateID } from './action';\nimport logo from './logo.svg';\nimport './App.css';\nimport MessageList from './components/message-list';\nimport ChatInput from './components/chat-input';\n\nconst styles = {\n    root: {\n        backgroundColor: '#B1E8EC',\n        backgroundImage:\n      'linear-gradient( -7deg, #B1E8EC 0%, #B1E8EC 50%, #BEEEF0 50%, #BEEEF0 50%)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh'\n    },\n    supportWindow: {\n        backgroundColor: '#354058',\n        width: '225px',\n        height: '50px',\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        alignItems: 'center',\n        boxShadow: '0px -2px 40px -10px rgba(0,0,0,0.3)',\n        borderRadius: '5px 5px 0px 0px'\n    },\n    supportIcon: {\n        color: '#5294FC'\n    },\n    supportText: {\n        color: '#CBD3DC',\n        textTransform: 'none',\n        fontSize: '16px'\n    },\n    supportFakeButton: {\n        color: '#5294FC'\n    },\n    chatWindow: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '450px',\n        height: '450px',\n        boxShadow: '0px 12px 40px -10px rgba(0,0,0,0.3)'\n    },\n    chatWindowTop: {\n        backgroundColor: '#EBF5F6', //'#CBD3DC',\n        height: '70px',\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        paddingLeft: '10px'\n    },\n    receipientPic: {\n        // borderRadius: '100%',\n        width: '70px'\n    },\n    receipientName: {\n        color: '#354058'\n    }\n};\n\nconst BOT_NAME = 'React Bot';\nconst USER_NAME = 'You';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        console.log('last updated: March 16, 2021');\n    }\n\n    componentDidMount() {\n        this.getOnboardingQuestions();\n    }\n\n    componentDidUpdate() {\n        const { messages } = this.props;\n\n        let length = messages.length - 1;\n        if (length > 0) {\n            if (messages[length].author !== BOT_NAME)\n                this.checkResponse(messages[length].message);\n        }\n    }\n\n    async getOnboardingQuestions() {\n        const URL =\n      'https://gist.githubusercontent.com/pcperini/97fe41fc42ac1c610548cbfebb0a4b88/raw/cc07f09753ad8fefb308f5adae15bf82c7fffb72/cerebral_challenge.json';\n        fetch(URL)\n            .then((res) => {\n                // In case the gist is deleted or doesn't load\n                if (!res.ok) {\n                    return [\n                        {\n                            \"id\": -1,\n                            \"question\": \"Sorry, we can't help you at this time. Have a nice day!\",\n                            \"validation\": false\n                        },\n                        {\n                            \"id\": 1,\n                            \"question\": \"Sorry, we encountered an error. Please try again later!\",\n                            \"validation\": false,\n                            \"paths\": -1\n                        }\n                    ];\n                }\n\n                return res.json();\n            })\n            .then((data) => {\n                this.props.setJSON(data);\n                this.props.sendMessage({\n                    message: data[1].question,\n                    author: BOT_NAME\n                });\n            });\n    }\n\n    checkResponse(message) {\n        const { onboardingJSON, currentID } = this.props;\n        if (onboardingJSON[currentID].validation === false) return;\n\n        //remove leading/trailing whitespace and lowercase response\n        const originalMessage = message;\n        message = _.toLower(_.trim(message));\n        if (typeof onboardingJSON[currentID].validation === 'boolean') {\n            //no need to verify, succeeded\n            this.postMessage(originalMessage, currentID);\n\n            this.props.sendMessage({\n                message: onboardingJSON[onboardingJSON[currentID].paths].question,\n                author: BOT_NAME\n            });\n            this.props.updateID(onboardingJSON[currentID].paths);\n\n            return;\n        } else if (typeof onboardingJSON[currentID].validation === 'string') {\n            //regex\n            let regexString = new RegExp(onboardingJSON[currentID].validation);\n            if (regexString.test(message)) {\n                //succeeded\n                this.postMessage(originalMessage, currentID);\n\n                let newPath = onboardingJSON[currentID].paths;\n                this.props.sendMessage({\n                    message: onboardingJSON[newPath].question,\n                    author: BOT_NAME\n                });\n                this.props.updateID(newPath);\n\n                return;\n            } else {\n                //failed\n                this.props.sendMessage({\n                    message: `Your response didn't meet the criteria, please try again`,\n                    author: BOT_NAME\n                });\n                this.props.sendMessage({\n                    message: onboardingJSON[currentID].question,\n                    author: BOT_NAME\n                });\n\n                return;\n            }\n        } else {\n            //mulitple options\n            if (_.includes(onboardingJSON[currentID].validation, message)) {\n                //succeeded\n                this.postMessage(originalMessage, currentID);\n\n                let newPath = -1;\n                if (Object.keys(onboardingJSON[currentID].paths).length > 1) {\n                    newPath = onboardingJSON[currentID].paths[message];\n                } else {\n                    newPath = onboardingJSON[currentID].paths;\n                }\n                if (newPath === -1) newPath = 0;\n                this.props.sendMessage({\n                    message: onboardingJSON[newPath].question,\n                    author: BOT_NAME\n                });\n                this.props.updateID(newPath);\n\n                return;\n            } else {\n                //failed response\n                this.props.sendMessage({\n                    message: `I don't understand your response, please try again`,\n                    author: BOT_NAME\n                });\n                this.props.sendMessage({\n                    message: onboardingJSON[currentID].question,\n                    author: BOT_NAME\n                });\n\n                return;\n            }\n        }\n    }\n\n    postMessage(originalMessage, id) {\n        const PUT_URL = `https://jsonplaceholder.typicode.com/posts/${id}`;\n        fetch(PUT_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(originalMessage)\n        }).then((res) => {\n            // console.log(res.json)\n        });\n    }\n\n    render() {\n        // const { onboardingJSON, messages, currentID } = this.props\n        return (\n            <div style={styles.root}>\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: '225px', height: '50px' }} />\n                    <Button style={styles.supportWindow}>\n                        <div style={styles.supportIcon}>\n                            <ChatICON />\n                        </div>\n                        <div style={styles.supportText}> Live Support </div>\n                        <div style={styles.supportFakeButton}>\n                            <DownArrowICON />\n                        </div>\n                    </Button>\n                </div>\n                <div style={styles.chatWindow}>\n                    <div style={styles.chatWindowTop}>\n                        <img src={logo} style={styles.receipientPic} alt=\"Bot Icon\" />\n                        <div style={styles.receipientName}>{BOT_NAME}</div>\n                    </div>\n                    <MessageList user={USER_NAME} />\n                    <ChatInput author={USER_NAME} />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        onboardingJSON: state.json,\n        messages: state.messages,\n        currentID: state.id\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({ setJSON, sendMessage, updateID }, dispatch);\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import { SEND_MESSAGE } from '../action';\n\nconst initialState = [];\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n    case SEND_MESSAGE:\n        return [...state, action.payload];\n    default:\n        return state;\n    }\n}\n","import { SET_JSON } from '../action';\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n    case SET_JSON:\n        return action.payload;\n    default:\n        return state;\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport MessageReducer from './reducers/reducer-message';\nimport JSONReducer from './reducers/reducer-json';\nimport IDReducer from './reducers/reducer-id';\n\nconst rootReducer = combineReducers({\n    json: JSONReducer,\n    messages: MessageReducer,\n    id: IDReducer\n});\n\nexport default rootReducer;\n","import { UPDATE_ID } from '../action';\n\nconst initialState = 1;\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n    case UPDATE_ID:\n        return action.payload;\n    default:\n        return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\n\nimport './index.css';\nimport App from './App';\nimport reducers from './reducer';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}
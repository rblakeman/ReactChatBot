{"version":3,"sources":["action.js","components/message-list.js","components/chat-input.js","App.js","reducers/reducer-message.js","reducers/reducer-json.js","reducer.js","reducers/reducer-id.js","index.js","logo.svg"],"names":["SET_JSON","SEND_MESSAGE","UPDATE_ID","setJSON","data","type","payload","sendMessage","message","updateID","id","styles","chatWindowCenter","backgroundColor","display","flexDirection","flex","overflowY","padding","loadingSpinner","alignSelf","paddingTop","receipientName","color","authorName","chatMessage","chatText","MessageList","chatScrollContainer","document","getElementById","scrollTop","scrollHeight","_this","this","messages","props","react_default","a","createElement","style","length","BeatLoader_default","size","_","map","ele","idx","key","author","user","split","Component","connect","state","onboardingJSON","json","currentID","chatWindowBottom","height","inputBox","marginRight","borderRadius","marginBottom","width","sendButton","marginLeft","ChatInput","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","input","_this$props","newMessage","setState","_this2","_this$props2","TextField","variant","onChange","ev","target","value","placeholder","onKeyDown","preventDefault","sendInput","Button","onClick","SendOutlined_default","dispatch","bindActionCreators","root","backgroundImage","justifyContent","alignItems","supportWindow","boxShadow","supportIcon","supportText","textTransform","fontSize","supportFakeButton","chatWindow","chatWindowTop","paddingLeft","receipientPic","BOT_NAME","App","getOnboardingQuestions","checkResponse","fetch","then","res","question","validation","originalMessage","toLower","trim","postMessage","paths","RegExp","test","newPath","includes","keys","PUT_URL","concat","method","headers","Content-Type","body","JSON","stringify","ChatOutlined_default","KeyboardArrowDown_default","src","logo","alt","message_list","chat_input","initialState","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducers","src_App_0","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4b3511a7.chunk.js","sourcesContent":["export const SET_JSON = 'SET_JSON'\nexport const SEND_MESSAGE = 'SEND_MESSAGE'\nexport const UPDATE_ID = 'UPDATE_ID'\n\nexport function setJSON(data) {\n  return {\n    type: SET_JSON,\n    payload: data\n  }\n}\n\nexport function sendMessage(message) {\n  let data = message\n\n  return {\n    type: SEND_MESSAGE,\n    payload: data\n  }\n}\n\nexport function updateID(id) {\n  if (id < 0) id = 0\n  return {\n    type: UPDATE_ID,\n    payload: id\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport _ from 'lodash'\n\nimport BeatLoader from 'react-spinners/BeatLoader'\n\nconst styles = {\n  chatWindowCenter: {\n    backgroundColor: '#FFFFFF',\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    overflowY: 'scroll',\n    padding: '10px 20px'\n  },\n  loadingSpinner: {\n    alignSelf: 'center',\n    paddingTop: '100px'\n  },\n  receipientName: {\n    color: '#354058'\n  },\n  authorName: {\n    color: '#5294FC'\n  },\n  chatMessage: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '5px 0px'\n  },\n  chatText: {\n    color: '#B7BFC8' //'#CBD3DC'\n  }\n}\n\nclass MessageList extends Component {\n  componentDidUpdate() {\n    let chatScrollContainer = document.getElementById('chat-scroll')\n    chatScrollContainer.scrollTop = chatScrollContainer.scrollHeight\n  }\n\n  render() {\n    const { messages } = this.props\n    return (\n      <div style={styles.chatWindowCenter} id={'chat-scroll'}>\n        {messages.length < 1 ? (\n          <div style={styles.loadingSpinner}>\n            <BeatLoader size={15} color={'#C6EEF0'} />\n          </div>\n        ) : (\n          _.map(messages, (ele, idx) => {\n            return (\n              <div key={idx} style={styles.chatMessage}>\n                <div\n                  style={\n                    ele.author === this.props.user\n                      ? styles.authorName\n                      : styles.receipientName\n                  }\n                >\n                  {ele.author}\n                </div>\n                <div style={styles.chatText}>\n                  {ele.style === 'password'\n                    ? _.map(ele.message.split(''), (ele) => {\n                        return '*'\n                      })\n                    : ele.message}\n                </div>\n              </div>\n            )\n          })\n        )}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onboardingJSON: state.json,\n    messages: state.messages,\n    currentID: state.id\n  }\n}\n\nexport default connect(mapStateToProps)(MessageList)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { setJSON, sendMessage, updateID } from '../action'\n\nimport { Button, TextField } from '@material-ui/core'\nimport SendICON from '@material-ui/icons/SendOutlined'\n\nconst styles = {\n  chatWindowBottom: {\n    backgroundColor: '#EBF5F6', //'#CBD3DC',\n    height: '60px',\n    display: 'flex',\n    flexDirection: 'row',\n    padding: '20px'\n  },\n  inputBox: {\n    backgroundColor: '#FFFFFF',\n    marginRight: '10px',\n    borderRadius: '5%',\n    marginBottom: '0',\n    width: '100%',\n    height: '93%'\n  },\n  sendButton: {\n    color: '#FFFFFF',\n    backgroundColor: '#5294FC',\n    marginLeft: '10px',\n    height: '93%'\n  }\n}\n\nclass ChatInput extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { input: '' }\n  }\n\n  sendInput(message) {\n    const { onboardingJSON, currentID } = this.props\n    let newMessage = {\n      message: message,\n      author: this.props.author\n    }\n    if (onboardingJSON[currentID].style === 'password')\n      newMessage.style = 'password'\n\n    this.props.sendMessage(newMessage)\n    this.setState({ input: '' })\n  }\n\n  render() {\n    const { onboardingJSON, currentID } = this.props\n    const { input } = this.state\n    return (\n      <div style={styles.chatWindowBottom}>\n        <TextField\n          variant=\"outlined\"\n          onChange={(ev) => this.setState({ input: ev.target.value })}\n          placeholder=\"Type here...\"\n          style={styles.inputBox}\n          value={input}\n          type={\n            onboardingJSON.length > 0 &&\n            onboardingJSON[currentID].style === 'password'\n              ? 'password'\n              : null\n          }\n          onKeyDown={(ev) => {\n            if (ev.key === 'Enter' && input.length > 0) {\n              ev.preventDefault()\n              this.sendInput(input)\n            }\n          }}\n        />\n        <Button\n          onClick={(ev) => {\n            ev.preventDefault()\n            if (input.length > 0) {\n              this.sendInput(input)\n            }\n          }}\n          style={styles.sendButton}\n        >\n          <SendICON />\n        </Button>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onboardingJSON: state.json,\n    messages: state.messages,\n    currentID: state.id\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ setJSON, sendMessage, updateID }, dispatch)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChatInput)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { setJSON, sendMessage, updateID } from './action'\nimport _ from 'lodash'\n\nimport logo from './logo.svg'\nimport './App.css'\nimport MessageList from './components/message-list'\nimport ChatInput from './components/chat-input'\n\nimport { Button } from '@material-ui/core'\nimport ChatICON from '@material-ui/icons/ChatOutlined'\nimport DownArrowICON from '@material-ui/icons/KeyboardArrowDown'\n\nconst styles = {\n  root: {\n    backgroundColor: '#B1E8EC',\n    backgroundImage:\n      'linear-gradient( -7deg, #B1E8EC 0%, #B1E8EC 50%, #BEEEF0 50%, #BEEEF0 50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh'\n  },\n  supportWindow: {\n    backgroundColor: '#354058',\n    width: '225px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    boxShadow: '0px -2px 40px -10px rgba(0,0,0,0.3)',\n    borderRadius: '5px 5px 0px 0px'\n  },\n  supportIcon: {\n    color: '#5294FC'\n  },\n  supportText: {\n    color: '#CBD3DC',\n    textTransform: 'none',\n    fontSize: '16px'\n  },\n  supportFakeButton: {\n    color: '#5294FC'\n  },\n  chatWindow: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '450px',\n    height: '450px',\n    boxShadow: '0px 12px 40px -10px rgba(0,0,0,0.3)'\n  },\n  chatWindowTop: {\n    backgroundColor: '#EBF5F6', //'#CBD3DC',\n    height: '70px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingLeft: '10px'\n  },\n  receipientPic: {\n    // borderRadius: '100%',\n    width: '70px'\n  },\n  receipientName: {\n    color: '#354058'\n  }\n}\n\nconst BOT_NAME = 'React Bot'\nconst USER_NAME = 'You'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  componentDidMount() {\n    this.getOnboardingQuestions()\n  }\n\n  componentDidUpdate() {\n    const { messages } = this.props\n\n    let length = messages.length - 1\n    if (length > 0) {\n      if (messages[length].author !== BOT_NAME)\n        this.checkResponse(messages[length].message)\n    }\n  }\n\n  async getOnboardingQuestions() {\n    const URL =\n      'https://gist.githubusercontent.com/pcperini/97fe41fc42ac1c610548cbfebb0a4b88/raw/cc07f09753ad8fefb308f5adae15bf82c7fffb72/cerebral_challenge.json'\n    fetch(URL)\n      .then((res) => {\n        return res.json()\n      })\n      .then((data) => {\n        this.props.setJSON(data)\n        this.props.sendMessage({\n          message: data[1].question,\n          author: BOT_NAME\n        })\n      })\n  }\n\n  checkResponse(message) {\n    const { onboardingJSON, currentID } = this.props\n    if (onboardingJSON[currentID].validation === false) return\n\n    //remove leading/trailing whitespace and lowercase response\n    const originalMessage = message\n    message = _.toLower(_.trim(message))\n    if (typeof onboardingJSON[currentID].validation === 'boolean') {\n      //no need to verify, succeeded\n      this.postMessage(originalMessage, currentID)\n\n      this.props.sendMessage({\n        message: onboardingJSON[onboardingJSON[currentID].paths].question,\n        author: BOT_NAME\n      })\n      this.props.updateID(onboardingJSON[currentID].paths)\n      return\n    } else if (typeof onboardingJSON[currentID].validation === 'string') {\n      //regex\n      let regexString = new RegExp(onboardingJSON[currentID].validation)\n      if (regexString.test(message)) {\n        //succeeded\n        this.postMessage(originalMessage, currentID)\n\n        let newPath = onboardingJSON[currentID].paths\n        this.props.sendMessage({\n          message: onboardingJSON[newPath].question,\n          author: BOT_NAME\n        })\n        this.props.updateID(newPath)\n        return\n      } else {\n        //failed\n        this.props.sendMessage({\n          message: `Your response didn't meet the criteria, please try again`,\n          author: BOT_NAME\n        })\n        this.props.sendMessage({\n          message: onboardingJSON[currentID].question,\n          author: BOT_NAME\n        })\n        return\n      }\n    } else {\n      //mulitple options\n      if (_.includes(onboardingJSON[currentID].validation, message)) {\n        //succeeded\n        this.postMessage(originalMessage, currentID)\n\n        let newPath = -1\n        if (Object.keys(onboardingJSON[currentID].paths).length > 1) {\n          newPath = onboardingJSON[currentID].paths[message]\n        } else {\n          newPath = onboardingJSON[currentID].paths\n        }\n        if (newPath === -1) newPath = 0\n        this.props.sendMessage({\n          message: onboardingJSON[newPath].question,\n          author: BOT_NAME\n        })\n        this.props.updateID(newPath)\n        return\n      } else {\n        //failed response\n        this.props.sendMessage({\n          message: `I don't understand your response, please try again`,\n          author: BOT_NAME\n        })\n        this.props.sendMessage({\n          message: onboardingJSON[currentID].question,\n          author: BOT_NAME\n        })\n        return\n      }\n    }\n  }\n\n  postMessage(originalMessage, id) {\n    const PUT_URL = `https://jsonplaceholder.typicode.com/posts/${id}`\n    fetch(PUT_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(originalMessage)\n    }).then((res) => {\n      // console.log(res.json)\n    })\n  }\n\n  render() {\n    // const { onboardingJSON, messages, currentID } = this.props\n    return (\n      <div style={styles.root}>\n        <div style={{ display: 'flex' }}>\n          <div style={{ width: '225px', height: '50px' }} />\n          <Button style={styles.supportWindow}>\n            <div style={styles.supportIcon}>\n              <ChatICON />\n            </div>\n            <div style={styles.supportText}> Live Support </div>\n            <div style={styles.supportFakeButton}>\n              <DownArrowICON />\n            </div>\n          </Button>\n        </div>\n        <div style={styles.chatWindow}>\n          <div style={styles.chatWindowTop}>\n            <img src={logo} style={styles.receipientPic} alt=\"Bot Icon\" />\n            <div style={styles.receipientName}>{BOT_NAME}</div>\n          </div>\n          <MessageList user={USER_NAME} />\n          <ChatInput author={USER_NAME} />\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    onboardingJSON: state.json,\n    messages: state.messages,\n    currentID: state.id\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ setJSON, sendMessage, updateID }, dispatch)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import { SEND_MESSAGE } from '../action'\n\nconst initialState = []\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      return [...state, action.payload]\n    default:\n      return state\n  }\n}\n","import { SET_JSON } from '../action'\n\nconst initialState = {}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_JSON:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport MessageReducer from './reducers/reducer-message'\nimport JSONReducer from './reducers/reducer-json'\nimport IDReducer from './reducers/reducer-id'\n\nconst rootReducer = combineReducers({\n  json: JSONReducer,\n  messages: MessageReducer,\n  id: IDReducer\n})\n\nexport default rootReducer\n","import { UPDATE_ID } from '../action'\n\nconst initialState = 1\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_ID:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport ReduxPromise from 'redux-promise'\n\nimport './index.css'\nimport App from './App'\nimport reducers from './reducer'\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore)\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}